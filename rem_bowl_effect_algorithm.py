# -*- coding: utf-8 -*-

"""
/***************************************************************************
 BowlEffect
                                 A QGIS plugin
 This plugin removes bowl effect from a DOD
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-06-02
        copyright            : (C) 2023 by LETG, IUEM (Plouzané, France)
        email                : antoineledoeuff@yahoo.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'LETG, IUEM (Plouzané, France)'
__date__ = '2023-06-02'
__copyright__ = '(C) 2023 by LETG, IUEM (Plouzané, France)'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterRasterLayer,
                       QgsProcessingParameterRasterDestination,
                       QgsProcessingParameterVectorDestination,
                       QgsProcessingParameterFile,
                       QgsProcessingMultiStepFeedback,
                       QgsRasterLayer,
                       QgsProcessingParameterFeatureSink)
from qgis.analysis import (QgsRasterCalculator,
                           QgsRasterCalculatorEntry)
from PyQt5.QtCore import QVariant
from qgis.PyQt.QtWidgets import QMessageBox
import processing
import geopandas as gpd
import numpy as np



class BowlEffectAlgorithm(QgsProcessingAlgorithm):
    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    INPUT = 'INPUT'
    OUTPUT_TEXTURE_FOLDER = 'OUTPUT_TEXTURE_FOLDER'
    OUTPUT_DOD_FILTERED = 'OUTPUT_DOD_FILTERED'
    OUTPUT_CLEANED = 'OUTPUT_CLEANED'
    OUTPUT_BSPLINE = 'OUTPUT_BSPLINE'
    OUTPUT_SAMPLE_POINTS = 'OUTPUT_SAMPLE_POINTS'
    OUTPUT_DOD_FILTERED_EXTRACT = 'OUTPUT_DOD_FILTERED_EXTRACT'
    OUTPUT_POLY = 'OUTPUT_POLY'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # INPUT
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.INPUT,
                self.tr('DOD to correct'),
                defaultValue=None
            )
        )

        # OUTPUT
        self.addParameter(
            QgsProcessingParameterRasterDestination(
                self.OUTPUT_DOD_FILTERED,
                self.tr('Texture extract from the DOD'),
                createByDefault=True,
                defaultValue=None
            )
        )
        self.addParameter(
            QgsProcessingParameterVectorDestination(
                self.OUTPUT_DOD_FILTERED_EXTRACT,
                self.tr('Polygones of non moving areas in DOD'),
                optional=True
            )
        )
        self.addParameter(
            QgsProcessingParameterVectorDestination(
                self.OUTPUT_SAMPLE_POINTS,
                self.tr('Points samples used for interpolation'),
                optional=True
            )
        )
        self.addParameter(
            QgsProcessingParameterRasterDestination(
                self.OUTPUT_BSPLINE,
                self.tr('Interpolate raster using bspline'),
                optional=True,
                defaultValue=None
            )
        )
        self.addParameter(
            QgsProcessingParameterRasterDestination(
                self.OUTPUT_CLEANED,
                self.tr('Bowl effect extract from the DOD'),
                createByDefault=True,
                defaultValue=None
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        # feedback = QgsProcessingMultiStepFeedback(11, model_feedback)
        # results = {}
        # outputs = {}

        dod = self.parameterAsRasterLayer(parameters, self.INPUT, context)
        raster_0 = self.parameterAsOutputLayer(parameters, self.OUTPUT_DOD_FILTERED, context)
        polygon_0 = self.parameterAsOutputLayer(parameters, self.OUTPUT_DOD_FILTERED_EXTRACT, context)
        sample_points_filter = self.parameterAsOutputLayer(parameters, self.OUTPUT_SAMPLE_POINTS, context)
        interpolated_bspline = self.parameterAsOutputLayer(parameters, self.OUTPUT_BSPLINE, context)
        dod_cleaned = self.parameterAsOutputLayer(parameters, self.OUTPUT_CLEANED, context)

        # ==========================================
        # FILTER DOD
        # ==========================================
        feedback.pushInfo(" ")
        feedback.pushInfo("Filtering DOD")

        # Retrieve general information about the dod
        ext = dod.extent()
        xmin = ext.xMinimum()
        xmax = ext.xMaximum()
        ymin = ext.yMinimum()
        ymax = ext.yMaximum()
        coords = "%f,%f,%f,%f" % (xmin, xmax, ymin, ymax)  # this is a string that stores the coordinates
        resoX = dod.rasterUnitsPerPixelX()

        feedback.pushInfo(f"Current resolution of the DOD {resoX}")

        entries = []
        ras = QgsRasterCalculatorEntry()
        ras.ref = 'dod@1'
        ras.raster = dod
        ras.bandNumber = 1
        entries.append(ras)

        calc = QgsRasterCalculator(
            "(dod@1 <= 0.30) AND (dod@1 >= -0.30)",  # Expression
            raster_0,  # Output
            'GTiff',  # Format
            dod.extent(), dod.width(), dod.height(),  # Extents
            entries  # Les rasters en entrées
        )
        calc.processCalculation()

        # -----------------------------------------
        # Polygonize
        # -----------------------------------------
        feedback.pushInfo(" ")
        feedback.pushInfo("Polygonizing filtered DOD")

        alg_params = {
            'input': raster_0,
            'type': 2,  # area
            'column': 'DN',
            '-s': False,
            '-v': False,
            '-z': False,
            '-b': False,
            '-t': False,
            'output': 'TEMPORARY_OUTPUT',
            'GRASS_REGION_PARAMETER': None,
            'GRASS_REGION_CELLSIZE_PARAMETER': 0,
            'GRASS_OUTPUT_TYPE_PARAMETER': 0,
            'GRASS_VECTOR_DSCO': '',
            'GRASS_VECTOR_LCO': '',
            'GRASS_VECTOR_EXPORT_NOCAT': True
        }

        polygons = processing.run("grass7:r.to.vect",
                                  alg_params,
                                  context=context,
                                  feedback=feedback)
        poly_layer = polygons['output']  # Be careful of the name of the output

        # Spatial index
        feedback.pushInfo(" ")
        feedback.pushInfo("Generating spatial index")
        poly_sp = processing.run("native:createspatialindex",
                                 {'INPUT': poly_layer},
                                 context=context,
                                 feedback=feedback)
        poly_sp_lyr = poly_sp['OUTPUT']

        # -----------------------------------------
        # Fix geometry
        # -----------------------------------------
        feedback.pushInfo(" ")
        feedback.pushInfo("Reparing geometry of the polygonized layer")
        # Very long...

        alg_params = {
            'INPUT': poly_sp_lyr,
            'METHOD': 1,  # structure method
            'OUTPUT': 'TEMPORARY_OUTPUT'
        }
        poly_fixed = processing.run("native:fixgeometries",
                                    alg_params,
                                    context=context,
                                    feedback=feedback)
        poly_fixed_lyr = poly_fixed['OUTPUT']

        # -----------------------------------------
        # Extract 0
        # -----------------------------------------
        feedback.pushInfo(" ")
        feedback.pushInfo("Extracting non moving area from shapefile")

        alg_params = {
            'EXPRESSION': '"DN" = 1',
            'INPUT': poly_fixed_lyr,
            'OUTPUT': 'TEMPORARY_OUTPUT'
        }
        poly_0 = processing.run('native:extractbyexpression',
                                alg_params,
                                context=context,
                                feedback=feedback)
        poly_0_lyr = poly_0['OUTPUT']

        # -----------------------------------------
        # Compute areas
        # -----------------------------------------
        feedback.pushInfo(" ")
        feedback.pushInfo("Computing area of non moving area")

        alg_params = {
            'FIELD_LENGTH': 20,
            'FIELD_NAME': 'area',
            'FIELD_PRECISION': 3,
            'FIELD_TYPE': 0,  # Float
            'FORMULA': '$area*1000',
            'INPUT': poly_0_lyr,
            'OUTPUT': 'TEMPORARY_OUTPUT'
        }
        poly_area = processing.run('native:fieldcalculator',
                                   alg_params,
                                   context=context,
                                   feedback=feedback)
        poly_area_lyr = poly_area['OUTPUT']

        # ------------------------------------------------------
        # Filter area to precise location of non moving areas
        # ------------------------------------------------------
        feedback.pushInfo(" ")
        feedback.pushInfo("Extract area >= 25 m2, this may take a while...")

        alg_params = {
            'EXPRESSION': '"area">=25',
            'INPUT': poly_area_lyr,
            'OUTPUT': polygon_0
        }
        poly_area_filter = processing.run('native:extractbyexpression',
                                          alg_params,
                                          context=context,
                                          feedback=feedback)
        poly_area_filter_lyr = poly_area_filter['OUTPUT']

        # ==========================================
        # GENERATE SURFACE OF NON MOVING AREAS
        # ==========================================
        # Random points inside non-moving areas
        # ------------------------------------------
        feedback.pushInfo(" ")
        feedback.pushInfo("Creating random point inside non moving area")

        alg_params = {
            'INPUT': poly_area_filter_lyr,
            'MIN_DISTANCE': 0.5,  # minimum distance (e.g. 0.5 m)
            'STRATEGY': 1,  # Points density
            'VALUE': 1,  # density value
            'OUTPUT': 'TEMPORARY_OUTPUT'
        }
        random_points = processing.run('qgis:randompointsinsidepolygons',
                                       alg_params,
                                       context=context,
                                       feedback=feedback)
        random_points_lyr = random_points['OUTPUT']

        # -----------------------------------------
        # Retrieve values from the DOD
        # -----------------------------------------
        feedback.pushInfo(" ")
        feedback.pushInfo("Passing DOD value to the points")

        alg_params = {
            'GRASS_MIN_AREA_PARAMETER': 0.0001,
            'GRASS_OUTPUT_TYPE_PARAMETER': 0,  # auto
            'GRASS_REGION_CELLSIZE_PARAMETER': resoX,
            'GRASS_REGION_PARAMETER': coords,
            'GRASS_SNAP_TOLERANCE_PARAMETER': -1,
            'GRASS_VECTOR_DSCO': '',
            'GRASS_VECTOR_EXPORT_NOCAT': False,
            'GRASS_VECTOR_LCO': '',
            'column': 'id',
            'input': random_points_lyr,
            'method': 0,  # nearest
            'raster': dod,
            'zscale': 1,
            'output': 'TEMPORARY_OUTPUT'
        }
        sample_points = processing.run('grass7:v.sample',
                                       alg_params,
                                       context=context,
                                       feedback=feedback)
        sample_points_lyr = sample_points['output']

        # -----------------------------------------
        # Filter points
        # -----------------------------------------
        feedback.pushInfo(" ")
        feedback.pushInfo("Removing outliers from points")

        # Load layer into geopandas dataframe
        data_gpkg = gpd.read_file(sample_points_lyr)
        column_data = data_gpkg['rast_val']

        # Calculate the quartiles
        q1 = np.percentile(column_data, 25)
        q3 = np.percentile(column_data, 75)

        # Calculate the interquartile range (IQR)
        iqr = q3 - q1

        # Define the threshold as 1.5 times the IQR
        threshold = 1.5 * iqr

        # Calculate the upper and lower thresholds
        upper_threshold = q3 + threshold
        feedback.pushInfo(f"Current upper threshold is {upper_threshold}")
        lower_threshold = q1 - threshold
        feedback.pushInfo(f"Current lower threshold is {lower_threshold}")

        alg_params = {
            'EXPRESSION': f'"rast_val" <= {upper_threshold} AND "rast_val" >= {lower_threshold}',
            'INPUT': sample_points_lyr,
            'OUTPUT': sample_points_filter
        }
        sp_pts_filter = processing.run('native:extractbyexpression',
                                       alg_params, context=context,
                                       feedback=feedback)
        sp_pts_filter_lyr = sp_pts_filter['OUTPUT']

        # -------------------------------------------------
        # Create interpolate surfaces from sample points
        # -------------------------------------------------
        feedback.pushInfo(" ")
        feedback.pushInfo("Generating interpolated surface from sample points")

        alg_params = {
            'GRASS_MIN_AREA_PARAMETER': 0.0001,
            'GRASS_OUTPUT_TYPE_PARAMETER': 0,  # auto
            'GRASS_RASTER_FORMAT_META': '',
            'GRASS_RASTER_FORMAT_OPT': '',
            'GRASS_REGION_CELLSIZE_PARAMETER': resoX,
            'GRASS_REGION_PARAMETER': coords,
            'GRASS_SNAP_TOLERANCE_PARAMETER': -1,
            'GRASS_VECTOR_DSCO': '',
            'GRASS_VECTOR_EXPORT_NOCAT': False,
            'GRASS_VECTOR_LCO': '',
            'column': 'rast_val',
            'error': 1e-06,
            'ew_step': 1,
            'input': sp_pts_filter_lyr,
            'lambda_i': 0.75,  # smooth param
            'maxit': 10000,
            'memory': 300,
            'method': 0,  # bilinear
            'ns_step': 1,
            'solver': 0,  # cholesky
            'sparse_input': None,
            'raster_output': interpolated_bspline
        }
        interp = processing.run('grass7:v.surf.bspline',
                                alg_params,
                                context=context,
                                feedback=feedback)
        interp_lyr = interp['raster_output']

        # =========================================================
        # CLEAN THE DOD
        # =========================================================
        # Difference between the interpolated surface and the DOD
        # ---------------------------------------------------------
        feedback.pushInfo(" ")
        feedback.pushInfo("Make difference between the DOD and the interpolated surface")

        alg_params = {
            'BAND_A': 1,
            'BAND_B': 1,
            'BAND_C': None,
            'BAND_D': None,
            'BAND_E': None,
            'BAND_F': None,
            'EXTRA': '',
            'FORMULA': 'A-B',
            'INPUT_A': dod,
            'INPUT_B': interp_lyr,
            'INPUT_C': None,
            'INPUT_D': None,
            'INPUT_E': None,
            'INPUT_F': None,
            'NO_DATA': None,
            'OPTIONS': '',
            'RTYPE': 5,  # Float32
            'OUTPUT': dod_cleaned
        }
        rem_bowl = processing.run('gdal:rastercalculator',
                                  alg_params,
                                  context=context,
                                  feedback=feedback)
        rem_bowl_lyr = rem_bowl['OUTPUT']

        # Return the results of the algorithm. In this case our only result is
        # the feature sink which contains the processed features, but some
        # algorithms may return multiple feature sinks, calculated numeric
        # statistics, etc. These should all be included in the returned
        # dictionary, with keys matching the feature corresponding parameter
        # or output names.
        return {
            self.OUTPUT_DOD_FILTERED_EXTRACT: poly_area_filter_lyr,
            self.OUTPUT_SAMPLE_POINTS: sp_pts_filter_lyr,
            self.OUTPUT_BSPLINE: interp_lyr,
            self.OUTPUT_CLEANED: rem_bowl_lyr
        }

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Remove bowl effect'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return ''

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return BowlEffectAlgorithm()
